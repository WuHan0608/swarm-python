#!/usr/bin/env python2
# -*- coding: utf8 -*-

import argparse
import json
import os
from swarm import *

def get_base_url():
    config = ApiConfig().config
    if not os.path.exists(config):
        print('Config not found. Please add config first')
        exit(1)
    try:
        with open(config, 'r') as fp:
            data = json.load(fp)
        try:
            if data['current']:
                return data['apis'][data['current']]
            else:
                print('Current Swarm API is unset')
                exit(2)
        except KeyError:
            print('Current Swarm API is unset')
            exit(2)
        return data['apis'][current]
    except OSError as e:
        print(e)
        exit(3)

def add_parser():
    version = None
    funcs = {
        'version': Version(get_base_url(), version),
        'info': Info(get_base_url(), version),
        'ps': Containers(get_base_url(), version),
        'start': StartContainer(get_base_url(), version),
        'stop': StopContainer(get_base_url(), version),
        'restart': RestartContainer(get_base_url(), version),
        'rm': RemoveContainer(get_base_url(), version),
        'images': Images(get_base_url(), version),
        'rmi': RemoveImage(get_base_url(), version),
        'tag': Tag(get_base_url(), version),
    }
    #
    # create the top-level parser
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    #
    # create the parser for command 'swarm config'
    parser_config = subparsers.add_parser('api', help='Config Swarm API')
    parser_config.add_argument('command', choices=('get','update','remove','use'),\
                                help='Available comamnd: get, update, remove, use')
    parser_config.add_argument('argument', type=str,\
                                help='a comma-separated list for `get`(i.e. name1,name2);\
 a comma-separated list for `update`(i.e. name1=api1,name2=api2);\
 a comma-separated list for `remove`(i.e. name1,name2);\
 set name as current Swarm API for `use`')
    parser_config.set_defaults(ApiConfig())
    #
    # create the parser for command 'swarm version'
    parser_version = subparsers.add_parser('version', help='Show the Docker version information.')
    parser_version.set_defaults(func=funcs['version'])
    #
    # create the parser for command 'swarm info'
    parser_info = subparsers.add_parser('info', help='Display system-wide information')
    parser_info.set_defaults(func=funcs['info'])
    #
    # create the parser for command 'swarm ps'
    parser_ps = subparsers.add_parser('ps', help='List containers')
    parser_ps.add_argument('-a', '--all',action='store_true',\
                            help='Show all containers (default shows just running)')
    parser_ps.add_argument('-f', '--filter',type=str,\
                            help='Filter output based on conditions provide, a comma-separated list')
    parser_ps.add_argument('-l','--limit',type=str,\
                            help='Show containers on nodes provide, a comma-separated list')
    parser_ps.set_defaults(func=funcs['ps'])
    #
    # create the paser for command 'swarm start'
    parser_start = subparsers.add_parser('start', help='Start one or more stopped containers')
    parser_start.add_argument('CONTAINER',nargs='+', help='Container ID')
    parser_start.set_defaults(func=funcs['start'])
    #
    # create the paser for command 'swarm stop'
    parser_start = subparsers.add_parser('stop',\
                            help='Stop a running container by sending SIGTERM and then SIGKILL after a grace period')
    parser_start.add_argument('CONTAINER',nargs='+', help='Container ID')
    parser_start.set_defaults(func=funcs['stop'])
    #
    # create the paser for command 'swarm restart'
    parser_start = subparsers.add_parser('restart', help='Restart a running container')
    parser_start.add_argument('CONTAINER',nargs='+', help='Container ID')
    parser_start.set_defaults(func=funcs['restart'])
    #
    # create the paser for command 'swarm rm'
    parser_start = subparsers.add_parser('rm', help='Remove one or more containers')
    parser_start.add_argument('CONTAINER',nargs='+', help='CONTAINER ID')
    parser_start.set_defaults(func=funcs['rm'])
    #
    # create the parser for command 'swarm images'
    parser_images = subparsers.add_parser('images', help='List images')
    parser_images.add_argument('REPOSITORY', nargs='?', help='REPOSITORY NAME', default=None)
    parser_images.add_argument('-a', '--all', action='store_true',\
                                help='Show all images (default hides intermediate images)')
    parser_images.add_argument('-f','--filter',type=str,\
                                help='Filter output based on conditions provided, a comma-separated list')
    parser_images.set_defaults(func=funcs['images'])
    #
    # create the parser for command 'swarm rmi'
    parser_rmi = subparsers.add_parser('rmi', help='Remove one or more images')
    parser_rmi.add_argument('IMAGE', nargs='+', help='IMAGE[:TAG]')
    parser_rmi.set_defaults(func=funcs['rmi'])
    #
    # create the parser for command 'swarm tag'
    parser_tag = subparsers.add_parser('tag', help='Tag an image into a repository')
    parser_tag.add_argument('IMAGE', type=str, help='IMAGE[:TAG]')
    parser_tag.add_argument('REPOTAG', type=str, help='[REGISTRYHOST/][USERNAME/]NAME[:TAG]')
    parser_tag.set_defaults(func=funcs['tag'])
    return parser

def main():
    parser = add_parser()
    args = parser.parse_args()
    method = args.func.__class__.__name__
    if method == 'ApiConfig':
        if args.command == 'get':
            for name in args.argument.split(','):
                args.func.get_api(name)
        elif args.command == 'update':
            for item in args.argument.split(','):
                name, api = item.split('=')
                args.func.update_api(name, api)
        elif args.command == 'remove':
            for name in args.argument.split(','):
                args.func.remove_api(name)
        elif args.command == 'use':
            args.func.use_api(args.argument)
    elif method in ('Version', 'Info'):
        args.func()
    elif method == 'Containers':
        filters = {}
        if args.filter:
            for item in args.filter.split(','):
                k, v = item.split('=')
                filters[k] = v
        if args.limit:
            limit = tuple(args.limit.split(','))
        else:
            limit = None
        args.func(show_all=args.all,filters=filters,limit=limit)
    elif method in ('Start', 'Stop', 'Restart', 'RemoveContainer'):
        args.func(tuple(args.CONTAINER))
    elif method == 'Images':
        filters = {}
        if args.filter:
            for item in args.filter.split(','):
                k, v = item.split('=')
                filters[k] = v
        args.func(name=args.REPOSITORY,show_all=args.all,filters=filters)
    elif method == 'RemoveImage':
        images = set()
        for image_name in args.IMAGE:
            # tag defaults to 'latest' if not provide
            if len(image_name.split(':')) == 1:
                image = ''.join((image_name.split(':')[0], ':', 'latest'))
            else:
                image = image_name
            images.add(image)
        args.func(tuple(images))
    elif method == 'Tag':
        repo_name = args.REPOTAG.split(':', 1)
        # tag defaults to 'latest' if not provide
        if len(repo_name) == 1:
            repo = repo_name[0]
            tag = 'latest'
        else:
            repo, tag = repo_name
        args.func(args.IMAGE, repo, tag)

if __name__ == '__main__':
    main()
