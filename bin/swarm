#!/usr/bin/env python2
# -*- coding: utf8 -*-

import argparse
import json
from swarm import *

def base_url_found(config):
    try:
        with open(config, 'r') as fp:
            data = json.load(fp)
        try:
            if data['apis'][data['current']]:
                return True
        except KeyError:
            return False
    except IOError:
        return False

def current_url_found(config):
    try:
        with open(config, 'r') as fp:
            data = json.load(fp)
        try:
            if data['current']:
                return True
        except KeyError:
            return False
    except IOError:
        return False
        
def add_parser():
    # create the top-level parser
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    #
    # create the subparser for command 'swarm config'
    parser_config = subparsers.add_parser('api', help='Config Swarm API arguments, Otherwise no further command')
    parser_config.add_argument('command', choices=('get','update','remove','use'),\
                                help='Available comamnd: get, update, remove, use')
    parser_config.add_argument('argument', type=str,\
                                help='\
a comma-separated list for `get`(i.e. name1,name2); \
a comma-separated list for `update`(i.e. name1=api1,name2=api2); \
a comma-separated list for `remove`(i.e. name1,name2); \
set one name as current Swarm API for `use`')
    parser_config.set_defaults(func=ApiConfig())
    # call docker remote api function only if server api url is provided
    if base_url_found(ApiConfig().config):
        # docker remote api function entrance
        funcs = {
            'version': Version(),
            'info': Info(),
            'ps': Containers(),
            'start': StartContainer(),
            'stop': StopContainer(),
            'restart': RestartContainer(),
            'rm': RemoveContainer(),
            'images': Images(),
            'rmi': RemoveImage(),
            'tag': Tag(),
            'run': CreateContainer(),
        }
        # create the subparser for command 'swarm version'
        parser_version = subparsers.add_parser('version', help='Show the Docker version information.')
        parser_version.set_defaults(func=funcs['version'])
        #
        # create the subparser for command 'swarm info'
        parser_info = subparsers.add_parser('info', help='Display system-wide information')
        parser_info.set_defaults(func=funcs['info'])
        #
        # create the subparser for command 'swarm ps'
        parser_ps = subparsers.add_parser('ps', help='List containers')
        parser_ps.add_argument('-a', '--all',action='store_true',\
                                help='Show all containers (default shows just running)')
        parser_ps.add_argument('-f', '--filter',type=str,\
                                help='Filter output based on conditions provide, a comma-separated list')
        parser_ps.add_argument('-l','--limit',type=str,\
                                help='Show containers on nodes provide, a comma-separated list')
        parser_ps.set_defaults(func=funcs['ps'])
        #
        # create the subpaser for command 'swarm start'
        parser_start = subparsers.add_parser('start', help='Start one or more stopped containers')
        parser_start.add_argument('CONTAINER',nargs='+', help='Container ID')
        parser_start.set_defaults(func=funcs['start'])
        #
        # create the subpaser for command 'swarm stop'
        parser_start = subparsers.add_parser('stop',\
                                help='Stop a running container by sending SIGTERM and then SIGKILL after a grace period')
        parser_start.add_argument('CONTAINER',nargs='+', help='Container ID')
        parser_start.set_defaults(func=funcs['stop'])
        #
        # create the subpaser for command 'swarm restart'
        parser_start = subparsers.add_parser('restart', help='Restart a running container')
        parser_start.add_argument('CONTAINER',nargs='+', help='Container ID')
        parser_start.set_defaults(func=funcs['restart'])
        #
        # create the subpaser for command 'swarm rm'
        parser_start = subparsers.add_parser('rm', help='Remove one or more containers')
        parser_start.add_argument('CONTAINER',nargs='+', help='CONTAINER ID')
        parser_start.set_defaults(func=funcs['rm'])
        #
        # create the subparser for command 'swarm images'
        parser_images = subparsers.add_parser('images', help='List images')
        parser_images.add_argument('REPOSITORY', nargs='?', help='REPOSITORY NAME', default=None)
        parser_images.add_argument('-a', '--all', action='store_true',\
                                    help='Show all images (default hides intermediate images)')
        parser_images.add_argument('-f','--filter',type=str,\
                                    help='Filter output based on conditions provided, a comma-separated list')
        parser_images.set_defaults(func=funcs['images'])
        #
        # create the subparser for command 'swarm rmi'
        parser_rmi = subparsers.add_parser('rmi', help='Remove one or more images')
        parser_rmi.add_argument('IMAGE', nargs='+', help='IMAGE[:TAG]')
        parser_rmi.set_defaults(func=funcs['rmi'])
        #
        # create the subparser for command 'swarm tag'
        parser_tag = subparsers.add_parser('tag', help='Tag an image into a repository')
        parser_tag.add_argument('IMAGE', type=str, help='IMAGE[:TAG]')
        parser_tag.add_argument('REPOTAG', type=str, help='[REGISTRYHOST/][USERNAME/]NAME[:TAG]')
        parser_tag.set_defaults(func=funcs['tag'])
        #
        # create the subparser for command 'swarm run'
        parser_run = subparsers.add_parser('run', help='Run a command in a new container')
        parser_run.add_argument('--cpuset-cpus', dest='cpuset', type=str,\
                                help='CPUs in which to allow execution (0-3, 0,1)')
        parser_run.add_argument('-e', '--environment', type=str,\
                                help='Set environment variables, a comma-separated list')
        parser_run.add_argument('--entrypoint', type=str,\
                                help='Overwrite the default ENTRYPOINT of the image')
        parser_run.add_argument('--hostname', type=str,\
                                help='Container host name')
        parser_run.add_argument('-l', '--label', type=str,\
                                help='Set meta data on a container')
        parser_run.add_argument('--link', type=str,\
                                help='Add link to another container')
        parser_run.add_argument('-m', '--memory', type=str,\
                                help='Memory limit')
        parser_run.add_argument('--name', type=str,\
                                help='Assign a name to the container')
        parser_run.add_argument('--net', type=str,\
                                help='Set the Network mode for the container')
        parser_run.add_argument('-P', '--publish-all', action='store_true',\
                                help='Publish all exposed ports to random ports')
        parser_run.add_argument('-p', '--publish', type=str,\
help='Publish a container\'s port(s) to the host\
(format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort | containerPort),\
a comma-separated list')
        parser_run.add_argument('--privileged', action='store_true',\
                                help='Give extended privileges to this container')
        parser_run.add_argument('--restart', type=str,\
                                help='Restart policy to apply when a container exits')
        parser_run.add_argument('--rm', action='store_true')
        parser_run.add_argument('-u', '--user', type=str,\
                                help='Username or UID')
        parser_run.add_argument('-v', '--volume', type=str,\
                                help='Bind mount a volume, a comma-separated list')
        parser_run.add_argument('--volumes-from', dest='volumes_from', type=str,\
help='Mount volumes from the specified container(s), a comma-separated list')
    return parser

def main():
    parser = add_parser()
    args = parser.parse_args()
    method = args.func.__class__.__name__
    if method == 'ApiConfig':
        notice = '[Notice] No swarm api in use'
        if args.command == 'get':
            if not current_url_found(ApiConfig().config):
                print(notice)
            for name in args.argument.split(','):
                args.func.get_api(name.strip())
        elif args.command == 'update':
            if not current_url_found(ApiConfig().config):
                print(notice)
            for item in args.argument.split(','):
                name, api = item.strip().split('=')
                args.func.update_api(name, api)
        elif args.command == 'remove':
            if not current_url_found(ApiConfig().config):
                print(notice)
            for name in args.argument.split(','):
                args.func.remove_api(name.strip())
        elif args.command == 'use':
            args.func.use_api(args.argument)
    elif method in ('Version', 'Info'):
        args.func()
    elif method == 'Containers':
        filters = {}
        if args.filter:
            for item in args.filter.split(','):
                k, v = item.strip().split('=')
                filters[k] = v
        if args.limit:
            limit = tuple([n.strip() for n in args.limit.split(',')])
        else:
            limit = None
        args.func(show_all=args.all,filters=filters,limit=limit)
    elif method in ('StartContainer', 'StopContainer', 'RestartContainer', 'RemoveContainer'):
        args.func(tuple(args.CONTAINER))
    elif method == 'CreateContainer':
        pass
    elif method == 'Images':
        filters = {}
        if args.filter:
            for item in args.filter.split(','):
                k, v = item.strip().split('=')
                filters[k] = v
        args.func(name=args.REPOSITORY,show_all=args.all,filters=filters)
    elif method == 'RemoveImage':
        images = set()
        for image_name in args.IMAGE:
            # tag defaults to 'latest' if not provide
            if len(image_name.split(':')) == 1:
                image = ''.join((image_name.split(':')[0], ':', 'latest'))
            else:
                image = image_name
            images.add(image)
        args.func(tuple(images))
    elif method == 'Tag':
        repo_name = args.REPOTAG.split(':', 1)
        # tag defaults to 'latest' if not provide
        if len(repo_name) == 1:
            repo = repo_name[0]
            tag = 'latest'
        else:
            repo, tag = repo_name
        args.func(args.IMAGE, repo, tag)

if __name__ == '__main__':
    main()
